These are ideas for things to do (in no particular order):

 1. Periodic task system

 2. Direct thread swapping, esp. for sinc's or other synchronization operations
    where the next thread to execute is obvious.

 3. Qthreads with in/out vectors for cross-node workstealing

 4. Cross-node synchronization (i.e. fill remote FEB)

 5. Hierarchical shepherds (need to rename shepherds)

 6. 128-bit syncvars

 7. Change the futurelib spawner to use up existing concurrency limits before
    blocking

 8. Add a qthread_replace(me, func, arg, argsize) function to enable convenient
    tail-recursion algorithms

 9. Make futurelib limits dynamic

10. Rework futures to use preallocated contexts

11. Rework most qutil/qloop functions to deal with deactivated shepherds

12. Continuation passing (put a "spawn_to" in the precondition record)...

13. Coalesce system calls (is this a good idea?)

14. Implement MAMA malloc?

15. Use LockBox mutexes on BlueGene/P

Things to think about:

 1. Non-executing shepherds to allow for memory locales without associated
 	computing resources.

 2. Port to XMT (is this even possible???)
